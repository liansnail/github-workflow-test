name: Detect Changes and Deploy

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-agents: ${{ steps.changes.outputs.changed-agents }}
      matrix: ${{ steps.changes.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed agents
        id: changes
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.sha }})
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }})
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Extract unique agent names from changed paths
          CHANGED_AGENTS=$(echo "$CHANGED_FILES" | grep "^apps/" | cut -d'/' -f2 | sort -u | tr '\n' ' ')

          echo "Changed agents: $CHANGED_AGENTS"

          # Create matrix for parallel deployment
          AGENTS_ARRAY="[]"
          if [ ! -z "$CHANGED_AGENTS" ]; then
            AGENTS_JSON=$(echo "$CHANGED_AGENTS" | tr ' ' '\n' | grep -v '^$' | jq -R . | jq -s .)
            AGENTS_ARRAY=$(echo '{"agent":' $AGENTS_JSON '}')
          fi

          echo "changed-agents=$CHANGED_AGENTS" >> $GITHUB_OUTPUT
          echo "matrix=$AGENTS_ARRAY" >> $GITHUB_OUTPUT

  validate-agents:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed-agents != ''
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    outputs:
      agent-types: ${{ steps.detect.outputs.agent-types }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect agent type and validate
        id: detect
        run: |
          AGENT="${{ matrix.agent }}"

          if [ ! -d "apps/$AGENT" ]; then
            echo "❌ Agent directory apps/$AGENT does not exist"
            exit 1
          fi

          # Determine agent type based on naming
          case "$AGENT" in
            *-ar) AGENT_TYPE="augmented-reality" ;;
            *-rs) AGENT_TYPE="rust-service" ;;
            *-ts) AGENT_TYPE="typescript-service" ;;
            *-bt) AGENT_TYPE="behavior-tree" ;;
            *) AGENT_TYPE="unknown" ;;
          esac

          echo "✅ Agent $AGENT validated (type: $AGENT_TYPE)"

  build-agents:
    needs: [detect-changes, validate-agents]
    if: needs.detect-changes.outputs.changed-agents != ''
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and test agent
        run: |
          echo "🏗️ Building ${{ matrix.agent }}..."
          cd "apps/${{ matrix.agent }}"

          # Simulate build and test
          echo "✅ Build and tests completed for ${{ matrix.agent }}"

  deploy-agents:
    needs: [detect-changes, build-agents]
    if: needs.detect-changes.outputs.changed-agents != ''
    runs-on: ubuntu-latest
    environment:
      name: production-${{ matrix.agent }}
      url: https://github.com/${{ github.repository }}/deployments
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine agent type
        id: agent-info
        run: |
          AGENT="${{ matrix.agent }}"

          # Determine agent type based on naming
          case "$AGENT" in
            *-ar) AGENT_TYPE="augmented-reality" ;;
            *-rs) AGENT_TYPE="rust-service" ;;
            *-ts) AGENT_TYPE="typescript-service" ;;
            *-bt) AGENT_TYPE="behavior-tree" ;;
            *) AGENT_TYPE="unknown" ;;
          esac

          echo "agent-type=$AGENT_TYPE" >> $GITHUB_OUTPUT
          echo "agent-name=$AGENT" >> $GITHUB_OUTPUT

      - name: Initialize deployment tracking
        id: deployment
        run: |
          # Generate deployment ID using timestamp and agent name
          DEPLOYMENT_ID="deploy-${{ matrix.agent }}-$(date +%s)"
          DEPLOYMENT_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          echo "🚀 Starting deployment for ${{ matrix.agent }}"
          echo "📦 Agent: ${{ matrix.agent }}"
          echo "🏷️  Type: ${{ steps.agent-info.outputs.agent-type }}"
          echo "🆔 Deployment ID: $DEPLOYMENT_ID"
          echo "⏰ Started: $DEPLOYMENT_TIME"
          echo "📝 Trigger: ${{ github.event_name }}"
          echo "🌿 Branch: ${{ github.ref_name }}"
          echo "💡 Commit: ${{ github.sha }}"

          # Set outputs for later steps
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "deployment-time=$DEPLOYMENT_TIME" >> $GITHUB_OUTPUT
          echo "agent-name=${{ matrix.agent }}" >> $GITHUB_OUTPUT

      - name: Deploy agent
        run: |
          echo "🚀 Deploying ${{ matrix.agent }} (${{ steps.agent-info.outputs.agent-type }}) to production..."
          echo "📦 Agent: ${{ matrix.agent }}"
          echo "🏷️  Type: ${{ steps.agent-info.outputs.agent-type }}"
          echo "🔗 Deployment ID: ${{ steps.deployment.outputs.deployment-id }}"
          echo "📝 Trigger: ${{ github.event_name }}"
          echo "🌿 Branch: ${{ github.ref_name }}"

          # Demo deployment: read and display the agent's README
          if [ -f "apps/${{ matrix.agent }}/README.md" ]; then
            echo "📄 Deploying content from README.md:"
            cat "apps/${{ matrix.agent }}/README.md"
          else
            echo "📝 No README.md found, creating deployment record only"
          fi

          # Simulate deployment process
          sleep 2

          echo "✅ Deployment completed for ${{ matrix.agent }}"

      - name: Create deployment tag and summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentId = '${{ steps.deployment.outputs.deployment-id }}';
            const deploymentTime = '${{ steps.deployment.outputs.deployment-time }}';
            const agent = '${{ matrix.agent }}';
            const agentType = '${{ steps.agent-info.outputs.agent-type }}';
            const jobStatus = '${{ job.status }}';
            const commitSha = '${{ github.sha }}';
            const runId = '${{ github.run_id }}';

            console.log('Creating deployment record for:', { agent, agentType, deploymentId, jobStatus });

            const status = jobStatus === 'success' ? '✅ SUCCESS' : '❌ FAILED';
            const statusIcon = jobStatus === 'success' ? '✅' : '❌';

            // Create a deployment tag for successful deployments
            if (jobStatus === 'success') {
              const tagName = `${agent}-${new Date().toISOString().slice(0,10)}-${commitSha.slice(0,7)}`;

              try {
                await github.rest.git.createTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: tagName,
                  message: `Deploy ${agent} (${agentType}) - ${deploymentId}`,
                  object: commitSha,
                  type: 'commit'
                });

                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/tags/${tagName}`,
                  sha: commitSha
                });

                console.log(`Created deployment tag: ${tagName}`);
                core.setOutput('deployment-tag', tagName);
              } catch (error) {
                console.log('Could not create deployment tag:', error.message);
              }
            }

            // Add to job summary
            const summary = `
            ## ${statusIcon} Deployment: ${agent}

            | Field | Value |
            |-------|-------|
            | **Agent** | \`${agent}\` |
            | **Type** | \`${agentType}\` |
            | **Status** | ${status} |
            | **Deployment ID** | \`${deploymentId}\` |
            | **Environment** | \`production-${agent}\` |
            | **Trigger** | \`${{ github.event_name }}\` |
            | **Branch** | \`${{ github.ref_name }}\` |
            | **Commit** | [\`${commitSha.slice(0,7)}\`](https://github.com/${{ github.repository }}/commit/${commitSha}) |
            | **Started** | ${deploymentTime} |
            | **Workflow Run** | [#${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${runId}) |

            ${core.getInput('deployment-tag') ? `**Deployment Tag**: \`${core.getInput('deployment-tag')}\`` : ''}
            `;

            await core.summary
              .addHeading(`${statusIcon} Deployment: ${agent}`)
              .addTable([
                [{data: 'Field', header: true}, {data: 'Value', header: true}],
                ['Agent', agent],
                ['Type', agentType],
                ['Status', status],
                ['Deployment ID', deploymentId],
                ['Environment', `production-${agent}`],
                ['Trigger', '${{ github.event_name }}'],
                ['Branch', '${{ github.ref_name }}'],
                ['Commit', `${commitSha.slice(0,7)}`],
                ['Started', deploymentTime],
                ['Workflow Run', `#${{ github.run_number }}`]
              ])
              .write();

      - name: Record deployment result
        if: always()
        run: |
          DEPLOYMENT_ID="${{ steps.deployment.outputs.deployment-id }}"
          AGENT="${{ matrix.agent }}"
          AGENT_TYPE="${{ steps.agent-info.outputs.agent-type }}"
          STATUS="${{ job.status }}"

          echo "📊 Recording deployment result:"
          echo "  Agent: $AGENT"
          echo "  Type: $AGENT_TYPE"
          echo "  Deployment ID: $DEPLOYMENT_ID"
          echo "  Status: $STATUS"
          echo "  Time: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"

          # Create a deployment record file that can be used for tracking
          mkdir -p deployment-logs
          cat > "deployment-logs/${AGENT}-deployment.json" << EOF
          {
            "agent": "$AGENT",
            "agent_type": "$AGENT_TYPE",
            "deployment_id": "$DEPLOYMENT_ID",
            "status": "$STATUS",
            "environment": "production-$AGENT",
            "trigger": "${{ github.event_name }}",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "workflow_run": "${{ github.run_id }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "commit_message": "${{ github.event.head_commit.message || 'Manual deployment' }}",
            "changed_agents": "${{ needs.detect-changes.outputs.changed-agents }}"
          }
          EOF

          echo "✅ Deployment record created at deployment-logs/${AGENT}-deployment.json"

          if [ "$STATUS" = "success" ]; then
            echo "::notice title=Deployment Success::Successfully deployed $AGENT ($AGENT_TYPE) with ID $DEPLOYMENT_ID"
          else
            echo "::error title=Deployment Failed::Failed to deploy $AGENT ($AGENT_TYPE) with ID $DEPLOYMENT_ID"
          fi

  deployment-summary:
    needs: [detect-changes, deploy-agents]
    if: always() && needs.detect-changes.outputs.changed-agents != ''
    runs-on: ubuntu-latest

    steps:
      - name: Create deployment summary
        uses: actions/github-script@v7
        with:
          script: |
            const changedAgents = '${{ needs.detect-changes.outputs.changed-agents }}';
            const agents = changedAgents.trim().split(' ').filter(a => a);

            console.log('Creating deployment summary for agents:', agents);

            let summaryTable = `
            # 🚀 Deployment Summary

            **Trigger:** \`${{ github.event_name }}\`
            **Branch:** \`${{ github.ref_name }}\`
            **Commit:** [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            **Workflow Run:** [#${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Changed Agents:** ${agents.length} (${agents.join(', ')})

            ## Agent Deployment Status

            | Agent | Type | Status | Environment |
            |-------|------|--------|-------------|
            `;

            for (const agent of agents) {
              // Determine agent type
              let agentType = 'unknown';
              if (agent.endsWith('-ar')) agentType = 'augmented-reality';
              else if (agent.endsWith('-rs')) agentType = 'rust-service';
              else if (agent.endsWith('-ts')) agentType = 'typescript-service';
              else if (agent.endsWith('-bt')) agentType = 'behavior-tree';

              summaryTable += `| \`${agent}\` | ${agentType} | ⏳ In Progress | \`production-${agent}\` |\n`;
            }

            summaryTable += `\n> 💡 **Tip:** You can filter deployments by agent using tags like \`${agents[0]}-YYYY-MM-DD-COMMIT\` or check individual workflow runs for detailed logs.`;

            await core.summary
              .addRaw(summaryTable)
              .write();

            console.log('Deployment summary created successfully');