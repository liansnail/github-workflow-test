name: Detect Changes and Deploy

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-agents: ${{ steps.changes.outputs.changed-agents }}
      matrix: ${{ steps.changes.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed agents
        id: changes
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.sha }})
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }})
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Extract unique agent names from changed paths
          CHANGED_AGENTS=$(echo "$CHANGED_FILES" | grep "^apps/" | cut -d'/' -f2 | sort -u | tr '\n' ' ')

          echo "Changed agents: $CHANGED_AGENTS"

          # Create matrix for parallel deployment
          AGENTS_ARRAY="[]"
          if [ ! -z "$CHANGED_AGENTS" ]; then
            AGENTS_JSON=$(echo "$CHANGED_AGENTS" | tr ' ' '\n' | grep -v '^$' | jq -R . | jq -s .)
            AGENTS_ARRAY=$(echo '{"agent":' $AGENTS_JSON '}')
          fi

          echo "changed-agents=$CHANGED_AGENTS" >> $GITHUB_OUTPUT
          echo "matrix=$AGENTS_ARRAY" >> $GITHUB_OUTPUT

  validate-agents:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed-agents != ''
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    outputs:
      agent-types: ${{ steps.detect.outputs.agent-types }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect agent type and validate
        id: detect
        run: |
          AGENT="${{ matrix.agent }}"

          if [ ! -d "apps/$AGENT" ]; then
            echo "‚ùå Agent directory apps/$AGENT does not exist"
            exit 1
          fi

          # Determine agent type based on naming
          case "$AGENT" in
            *-ar) AGENT_TYPE="augmented-reality" ;;
            *-rs) AGENT_TYPE="rust-service" ;;
            *-ts) AGENT_TYPE="typescript-service" ;;
            *-bt) AGENT_TYPE="behavior-tree" ;;
            *) AGENT_TYPE="unknown" ;;
          esac

          echo "‚úÖ Agent $AGENT validated (type: $AGENT_TYPE)"

  build-agents:
    needs: [detect-changes, validate-agents]
    if: needs.detect-changes.outputs.changed-agents != ''
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and test agent
        run: |
          echo "üèóÔ∏è Building ${{ matrix.agent }}..."
          cd "apps/${{ matrix.agent }}"

          # Simulate build and test
          echo "‚úÖ Build and tests completed for ${{ matrix.agent }}"

  deploy-agents:
    needs: [detect-changes, build-agents]
    if: needs.detect-changes.outputs.changed-agents != ''
    runs-on: ubuntu-latest
    environment:
      name: production-${{ matrix.agent }}
      url: https://github.com/${{ github.repository }}/deployments
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine agent type
        id: agent-info
        run: |
          AGENT="${{ matrix.agent }}"

          # Determine agent type based on naming
          case "$AGENT" in
            *-ar) AGENT_TYPE="augmented-reality" ;;
            *-rs) AGENT_TYPE="rust-service" ;;
            *-ts) AGENT_TYPE="typescript-service" ;;
            *-bt) AGENT_TYPE="behavior-tree" ;;
            *) AGENT_TYPE="unknown" ;;
          esac

          echo "agent-type=$AGENT_TYPE" >> $GITHUB_OUTPUT
          echo "agent-name=$AGENT" >> $GITHUB_OUTPUT

      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: `production-${{ matrix.agent }}`,
              description: `Deploy ${{ matrix.agent }} (${{ steps.agent-info.outputs.agent-type }})`,
              auto_merge: false,
              required_contexts: [],
              payload: {
                agent: '${{ matrix.agent }}',
                agent_type: '${{ steps.agent-info.outputs.agent-type }}',
                commit_message: context.payload.head_commit?.message || context.payload.pull_request?.title || 'Manual deployment',
                changed_files: `${{ needs.detect-changes.outputs.changed-agents }}`,
                deployment_trigger: '${{ github.event_name }}',
                branch: '${{ github.ref_name }}'
              },
              transient_environment: false,
              production_environment: true
            });

            console.log('Created deployment with ID:', deployment.data.id);
            core.setOutput('deployment-id', deployment.data.id.toString());
            return deployment.data.id;

      - name: Set deployment status to in_progress
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentId = '${{ steps.deployment.outputs.deployment-id }}';
            console.log('Using deployment ID:', deploymentId);

            if (!deploymentId || deploymentId === '') {
              throw new Error('Deployment ID is empty or undefined');
            }

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: parseInt(deploymentId),
              state: 'in_progress',
              description: 'Deployment in progress for ${{ matrix.agent }}',
              environment_url: `https://github.com/${{ github.repository }}/deployments`,
              log_url: `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            });

      - name: Deploy agent
        run: |
          echo "üöÄ Deploying ${{ matrix.agent }} (${{ steps.agent-info.outputs.agent-type }}) to production..."
          echo "üì¶ Agent: ${{ matrix.agent }}"
          echo "üè∑Ô∏è  Type: ${{ steps.agent-info.outputs.agent-type }}"
          echo "üîó Deployment ID: ${{ steps.deployment.outputs.deployment-id }}"
          echo "üìù Trigger: ${{ github.event_name }}"
          echo "üåø Branch: ${{ github.ref_name }}"

          # Demo deployment: read and display the agent's README
          if [ -f "apps/${{ matrix.agent }}/README.md" ]; then
            echo "üìÑ Deploying content from README.md:"
            cat "apps/${{ matrix.agent }}/README.md"
          else
            echo "üìù No README.md found, creating deployment record only"
          fi

          # Simulate deployment process
          sleep 2

          echo "‚úÖ Deployment completed for ${{ matrix.agent }}"

      - name: Set deployment status to success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentId = '${{ steps.deployment.outputs.deployment-id }}';
            console.log('Setting success status for deployment ID:', deploymentId);

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: parseInt(deploymentId),
              state: 'success',
              description: 'Successfully deployed ${{ matrix.agent }} (${{ steps.agent-info.outputs.agent-type }})',
              environment_url: `https://production-${{ matrix.agent }}.example.com`,
              log_url: `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            });

      - name: Set deployment status to failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentId = '${{ steps.deployment.outputs.deployment-id }}';
            console.log('Setting failure status for deployment ID:', deploymentId);

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: parseInt(deploymentId),
              state: 'failure',
              description: 'Failed to deploy ${{ matrix.agent }} (${{ steps.agent-info.outputs.agent-type }})',
              environment_url: `https://production-${{ matrix.agent }}.example.com`,
              log_url: `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            });

      - name: Add deployment labels
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            // Add labels to the commit/PR for tracking
            const labels = [
              `deployed:${{ matrix.agent }}`,
              `agent-type:${{ steps.agent-info.outputs.agent-type }}`,
              `deployment:${{ github.event_name }}`
            ];

            // If this is a PR, add labels to the PR
            if (context.payload.pull_request) {
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  labels: labels
                });
              } catch (error) {
                console.log('Could not add labels to PR:', error.message);
              }
            }

            // Create a comment with deployment summary
            const deploymentInfo = `
            ## üöÄ Deployment Summary

            **Agent:** \`${{ matrix.agent }}\`
            **Type:** \`${{ steps.agent-info.outputs.agent-type }}\`
            **Environment:** \`production-${{ matrix.agent }}\`
            **Deployment ID:** \`${{ steps.deployment.outputs.deployment-id }}\`
            **Status:** ${context.job.status === 'success' ? '‚úÖ Success' : '‚ùå Failed'}
            **Trigger:** \`${{ github.event_name }}\`
            **Branch:** \`${{ github.ref_name }}\`

            [View Deployment Details](https://github.com/${{ github.repository }}/deployments)
            `;

            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: deploymentInfo
              });
            }