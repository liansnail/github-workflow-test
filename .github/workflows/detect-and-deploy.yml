name: Detect Changes and Deploy

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      changed-agents: ${{ steps.changes.outputs.changed-agents }}
      matrix: ${{ steps.changes.outputs.matrix }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed agents
        id: changes
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.sha }})
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }})
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Extract unique agent names from changed paths
          CHANGED_AGENTS=$(echo "$CHANGED_FILES" | grep "^apps/" | cut -d'/' -f2 | sort -u | tr '\n' ' ')

          echo "Changed agents: $CHANGED_AGENTS"

          # Create matrix for parallel deployment
          AGENTS_ARRAY="[]"
          if [ ! -z "$CHANGED_AGENTS" ]; then
            AGENTS_JSON=$(echo "$CHANGED_AGENTS" | tr ' ' '\n' | grep -v '^$' | jq -R . | jq -s .)
            AGENTS_ARRAY=$(echo '{"agent":' $AGENTS_JSON '}')
          fi

          echo "changed-agents=$CHANGED_AGENTS" >> $GITHUB_OUTPUT
          echo "matrix=$AGENTS_ARRAY" >> $GITHUB_OUTPUT

  validate-agents:
    needs: detect-changes
    if: needs.detect-changes.outputs.changed-agents != ''
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    outputs:
      agent-types: ${{ steps.detect.outputs.agent-types }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect agent type and validate
        id: detect
        run: |
          AGENT="${{ matrix.agent }}"

          if [ ! -d "apps/$AGENT" ]; then
            echo "❌ Agent directory apps/$AGENT does not exist"
            exit 1
          fi

          # Determine agent type based on naming
          case "$AGENT" in
            *-ar) AGENT_TYPE="augmented-reality" ;;
            *-rs) AGENT_TYPE="rust-service" ;;
            *-ts) AGENT_TYPE="typescript-service" ;;
            *-bt) AGENT_TYPE="behavior-tree" ;;
            *) AGENT_TYPE="unknown" ;;
          esac

          echo "✅ Agent $AGENT validated (type: $AGENT_TYPE)"

  build-agents:
    needs: [detect-changes, validate-agents]
    if: needs.detect-changes.outputs.changed-agents != ''
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and test agent
        run: |
          echo "🏗️ Building ${{ matrix.agent }}..."
          cd "apps/${{ matrix.agent }}"

          # Simulate build and test
          echo "✅ Build and tests completed for ${{ matrix.agent }}"

  deploy-agents:
    needs: [detect-changes, build-agents]
    if: needs.detect-changes.outputs.changed-agents != ''
    runs-on: ubuntu-latest
    environment:
      name: production-${{ matrix.agent }}
      url: https://github.com/${{ github.repository }}/deployments
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine agent type
        id: agent-info
        run: |
          AGENT="${{ matrix.agent }}"

          # Determine agent type based on naming
          case "$AGENT" in
            *-ar) AGENT_TYPE="augmented-reality" ;;
            *-rs) AGENT_TYPE="rust-service" ;;
            *-ts) AGENT_TYPE="typescript-service" ;;
            *-bt) AGENT_TYPE="behavior-tree" ;;
            *) AGENT_TYPE="unknown" ;;
          esac

          echo "agent-type=$AGENT_TYPE" >> $GITHUB_OUTPUT
          echo "agent-name=$AGENT" >> $GITHUB_OUTPUT

      - name: Start deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const deployment = await github.rest.repos.createDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.sha,
                environment: `production-${{ matrix.agent }}`,
                description: `Deploy ${{ matrix.agent }} (${{ steps.agent-info.outputs.agent-type }})`,
                auto_merge: false,
                required_contexts: [],
                payload: {
                  agent: '${{ matrix.agent }}',
                  agent_type: '${{ steps.agent-info.outputs.agent-type }}',
                  commit_message: context.payload.head_commit?.message || context.payload.pull_request?.title || 'Manual deployment',
                  changed_files: `${{ needs.detect-changes.outputs.changed-agents }}`,
                  deployment_trigger: '${{ github.event_name }}',
                  branch: '${{ github.ref_name }}'
                },
                transient_environment: false,
                production_environment: true
              });

              console.log('Created deployment:', deployment.data);
              core.setOutput('deployment-id', deployment.data.id);
              core.setOutput('deployment-url', deployment.data.url);

              // Set initial status to in_progress
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.data.id,
                state: 'in_progress',
                description: 'Deployment in progress for ${{ matrix.agent }}',
                environment_url: `https://production-${{ matrix.agent }}.example.com`,
                log_url: `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`
              });

              return deployment.data.id;
            } catch (error) {
              console.error('Deployment creation failed:', error);
              core.setFailed(`Failed to create deployment: ${error.message}`);
              throw error;
            }

      - name: Deploy agent
        run: |
          echo "🚀 Deploying ${{ matrix.agent }} (${{ steps.agent-info.outputs.agent-type }}) to production..."
          echo "📦 Agent: ${{ matrix.agent }}"
          echo "🏷️  Type: ${{ steps.agent-info.outputs.agent-type }}"
          echo "🔗 Deployment ID: ${{ steps.deployment.outputs.deployment-id }}"
          echo "📝 Trigger: ${{ github.event_name }}"
          echo "🌿 Branch: ${{ github.ref_name }}"

          # Demo deployment: read and display the agent's README
          if [ -f "apps/${{ matrix.agent }}/README.md" ]; then
            echo "📄 Deploying content from README.md:"
            cat "apps/${{ matrix.agent }}/README.md"
          else
            echo "📝 No README.md found, creating deployment record only"
          fi

          # Simulate deployment process
          sleep 2

          echo "✅ Deployment completed for ${{ matrix.agent }}"

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentId = '${{ steps.deployment.outputs.deployment-id }}';
            const jobStatus = '${{ job.status }}';

            console.log('Updating deployment status:', { deploymentId, jobStatus });

            if (!deploymentId) {
              console.log('No deployment ID found, skipping status update');
              return;
            }

            const state = jobStatus === 'success' ? 'success' : 'failure';
            const description = state === 'success'
              ? 'Successfully deployed ${{ matrix.agent }} (${{ steps.agent-info.outputs.agent-type }})'
              : 'Failed to deploy ${{ matrix.agent }} (${{ steps.agent-info.outputs.agent-type }})';

            try {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deploymentId,
                state: state,
                description: description,
                environment_url: `https://production-${{ matrix.agent }}.example.com`,
                log_url: `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`
              });

              console.log(`Deployment status updated to: ${state}`);
            } catch (error) {
              console.error('Failed to update deployment status:', error);
            }

      - name: Add deployment tracking
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentId = '${{ steps.deployment.outputs.deployment-id }}';
            const jobStatus = '${{ job.status }}';
            const agent = '${{ matrix.agent }}';
            const agentType = '${{ steps.agent-info.outputs.agent-type }}';

            console.log('Adding deployment tracking for:', { agent, agentType, deploymentId, jobStatus });

            // Create deployment summary
            const deploymentInfo = `
            ## 🚀 Deployment Summary for ${agent}

            **Agent:** \`${agent}\`
            **Type:** \`${agentType}\`
            **Environment:** \`production-${agent}\`
            **Deployment ID:** \`${deploymentId || 'N/A'}\`
            **Status:** ${jobStatus === 'success' ? '✅ Success' : '❌ Failed'}
            **Trigger:** \`${{ github.event_name }}\`
            **Branch:** \`${{ github.ref_name }}\`
            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ${deploymentId ? '[View Deployment Details](https://github.com/${{ github.repository }}/deployments)' : ''}
            `;

            // Add labels to PR if this is a pull request
            if (context.payload.pull_request) {
              try {
                const labels = [
                  `deployed:${agent}`,
                  `agent-type:${agentType}`,
                  `deployment:${{ github.event_name }}`,
                  `status:${jobStatus}`
                ];

                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  labels: labels
                });

                console.log('Added labels to PR:', labels);
              } catch (error) {
                console.log('Could not add labels to PR:', error.message);
              }

              // Add comment to PR
              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  body: deploymentInfo
                });

                console.log('Added deployment comment to PR');
              } catch (error) {
                console.log('Could not add comment to PR:', error.message);
              }
            }